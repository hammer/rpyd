<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/rpyd/rpyd_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/fb303/FacebookService.php';

interface rpydIf extends FacebookServiceIf {
  public function lm($Y, $X);
}

class rpydClient extends FacebookServiceClient implements rpydIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function lm($Y, $X)
  {
    $this->send_lm($Y, $X);
    return $this->recv_lm();
  }

  public function send_lm($Y, $X)
  {
    $this->output_->writeMessageBegin('lm', TMessageType::CALL, $this->seqid_);
    $args = new rpyd_lm_args();
    $args->Y = $Y;
    $args->X = $X;
    $args->write($this->output_);
    $this->output_->writeMessageEnd();
    $this->output_->getTransport()->flush();
  }

  public function recv_lm()
  {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $this->input_->readMessageBegin($fname, $mtype, $rseqid);
    if ($mtype == TMessageType::EXCEPTION) {
      $x = new TApplicationException();
      $x->read($this->input_);
      $this->input_->readMessageEnd();
      throw $x;
    }
    $result = new rpyd_lm_result();
    $result->read($this->input_);
    $this->input_->readMessageEnd();

    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new Exception("lm failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class rpyd_lm_args {
  public $Y = null;
  public $X = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['Y'])) {
        $this->Y = $vals['Y'];
      }
      if (isset($vals['X'])) {
        $this->X = $vals['X'];
      }
    }
  }

  public function getName() {
    return 'rpyd_lm_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->Y = new Response();
            $xfer += $this->Y->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            if (($input instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_binary_deserialize'))
            {
              $this->X = thrift_protocol_binary_deserialize(TType::LST, $input, 'Predictor');
            }
            else
            {
              $this->X = array();
              $_size14 = 0;
              $_etype17 = 0;
              $xfer += $input->readListBegin($_etype17, $_size14);
              for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
              {
                $elem19 = null;
                $elem19 = new Predictor();
                $xfer += $elem19->read($input);
                $this->X []= $elem19;
              }
              $xfer += $input->readListEnd();
            }
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('rpyd_lm_args');
    if ($this->Y !== null) {
      $xfer += $output->writeFieldBegin('Y', TType::STRUCT, 1);
      $xfer += $this->Y->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->X !== null) {
      $xfer += $output->writeFieldBegin('X', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->X));
        {
          foreach ($this->X as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class rpyd_lm_result {
  public $success = null;
  public $ouch = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'rpyd_lm_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            if (($input instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_binary_deserialize'))
            {
              $this->success = thrift_protocol_binary_deserialize(TType::MAP, $input);
            }
            else
            {
              $this->success = array();
              $_size21 = 0;
              $_ktype22 = 0;
              $_vtype23 = 0;
              $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
              for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
              {
                $key26 = '';
                $val27 = 0.0;
                if (($input instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_binary_deserialize')) {
                  $key26 = thrift_protocol_binary_deserialize(TType::STRING, $input);
                } else {
                  $xfer += $input->readString($key26);
                  }
                if (($input instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_binary_deserialize')) {
                  $val27 = thrift_protocol_binary_deserialize(TType::DOUBLE, $input);
                } else {
                  $xfer += $input->readDouble($val27);
                  }
                $this->success[$key26] = $val27;
              }
              $xfer += $input->readMapEnd();
            }
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new RegressionError();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('rpyd_lm_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::DOUBLE, count($this->success));
        {
          foreach ($this->success as $kiter28 => $viter29)
          {
            $xfer += $output->writeString($kiter28);
            $xfer += $output->writeDouble($viter29);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, 1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class rpydProcessor extends FacebookServiceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_lm($seqid, $input, $output) {
    $args = new rpyd_lm_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new rpyd_lm_result();
    try {
      $result->success = $this->handler_->lm($args->Y, $args->X);
    } catch (RegressionError $ouch) {
      $result->ouch = $ouch;
    }
    $output->writeMessageBegin('lm', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
}
?>
